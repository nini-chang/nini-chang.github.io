<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Object-oriented Programming on Nini Chang</title>
    <link>https://nini-chang.github.io/tags/object-oriented-programming/</link>
    <description>Recent content in Object-oriented Programming on Nini Chang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Jul 2021 13:03:04 +0800</lastBuildDate><atom:link href="https://nini-chang.github.io/tags/object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 筆記 - 基礎概念 (2)</title>
      <link>https://nini-chang.github.io/posts/js-concept-2/</link>
      <pubDate>Wed, 14 Jul 2021 13:03:04 +0800</pubDate>
      
      <guid>https://nini-chang.github.io/posts/js-concept-2/</guid>
      <description>物件導向 (Object-oriented Programming) 先來談談物件導向是什麼
 被理解為一種將程式分解為「封裝資料」及相關操作的「模組」，而進行的程式設計 通常共享高階程式的低階功能 基本工具：variable, function 利用繼承達到程式碼複用性、事物抽象化和物件的延伸性 訊息傳遞：動態組態（方法隨實例化動態的變化）   JavaScript 的 OOP 是 prototype-based，可參考: JavaScript 類似繼承設計與原型鍊
 OOP 三大特性：
 封裝 (Encapsulation) 繼承 (Inheritance) 多型 (Polymorphism)  封裝 (Encapsulation) 目的是簡化、提升系統安全性。將物件內部具體實現的方法隱藏起來，使用者只能透過物件本身提供的介面（interface）取得物件內部屬性或方法。
通常會賦予 public, private, protected 限制使用的對象。Public 可以被所有人都使用，private 僅限類別內部使用（子類別無法直接存取），protected 表示同一 package 成員可以直接存取，其他 package 必須透過繼承的方式才可以在子類別中存取。
繼承 (Inheritance) 類別物件的資源的「延伸」和「重複使用」。而延伸使用的稱為子類別，子類別會比父類別更加具體化。
class Bike { public String brand; public String Color; public int price; public String getBikeInfo() { return &amp;quot;Brand: &amp;quot; + brand + &amp;quot;, Color: &amp;quot; + color + &amp;quot;, Price: &amp;quot; + price; } } class Giant extends Bike { public String riderName; } 多型 (Polymorphism) 由繼承產生相關不同的 class，其物件會對同一訊息做不同反應。意即，多個相同名稱的方法，傳入不同參數會執行不同的敘述。其中包含多載（overloading）和覆寫（overriding）。</description>
    </item>
    
  </channel>
</rss>
